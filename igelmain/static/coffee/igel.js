// Generated by CoffeeScript 1.4.0
(function() {
  var Turtle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Turtle = (function() {

    function Turtle(w, h, canvas) {
      this.canvas = canvas;
      this.speed = __bind(this.speed, this);

      this.tick = __bind(this.tick, this);

      this.home = __bind(this.home, this);

      this.newpath = __bind(this.newpath, this);

      this.clear = __bind(this.clear, this);

      this.fill = __bind(this.fill, this);

      this.showturtle = __bind(this.showturtle, this);

      this.hideturtle = __bind(this.hideturtle, this);

      this.pensize = __bind(this.pensize, this);

      this.pencolor = __bind(this.pencolor, this);

      this.penup = __bind(this.penup, this);

      this.pendown = __bind(this.pendown, this);

      this.setAngle = __bind(this.setAngle, this);

      this.right = __bind(this.right, this);

      this.left = __bind(this.left, this);

      this.backward = __bind(this.backward, this);

      this.forward = __bind(this.forward, this);

      this.canvas.width = w;
      this.canvas.height = h;
      this.stage = new createjs.Stage($("#canvas")[0]);
      this.home.x = w / 2;
      this.home.y = h / 2;
      this.home.angle = 0;
      createjs.Ticker.addListener(this);
      this.queue = $({});
      this.clear();
    }

    Turtle.prototype.update = function() {
      this.turtle.x = this.x;
      this.turtle.y = this.y;
      return this.turtle.rotation = this.angle;
    };

    Turtle.prototype.forwardPos = function(distance) {
      var x, y;
      x = (Math.sin(this.angle / 180 * Math.PI) * distance) + this.x;
      y = (Math.cos(this.angle / 180 * Math.PI) * (-distance)) + this.y;
      return {
        x: x,
        y: y
      };
    };

    Turtle.prototype.forward = function(distance) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        var toPos;
        toPos = _this.forwardPos(distance);
        if (_this.isPendown) {
          _this.g.lineTo(toPos.x, toPos.y);
        } else {
          _this.g.moveTo(toPos.x, toPos.y);
        }
        _this.x = toPos.x;
        _this.y = toPos.y;
        return _this.update();
      });
    };

    Turtle.prototype.backward = function(distance) {
      return this.forward(-distance);
    };

    Turtle.prototype.left = function(angle) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.angle -= angle;
        return _this.update();
      });
    };

    Turtle.prototype.right = function(angle) {
      return this.left(-angle);
    };

    Turtle.prototype.setAngle = function(angle) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.angle = angle;
        return _this.update();
      });
    };

    Turtle.prototype.pendown = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.isPendown = true;
        return next();
      });
    };

    Turtle.prototype.penup = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.isPendown = false;
        return next();
      });
    };

    Turtle.prototype.pencolor = function(color) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.penColor = color;
        _this.g.beginStroke(_this.penColor);
        _this.g.moveTo(_this.x, _this.y);
        return next();
      });
    };

    Turtle.prototype.pensize = function(x) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.g.setStrokeStyle(x);
        _this.g.moveTo(_this.x, _this.y);
        return next();
      });
    };

    Turtle.prototype.hideturtle = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.turtle.visible = false;
        return _this.update();
      });
    };

    Turtle.prototype.showturtle = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.turtle.visible = true;
        return _this.update();
      });
    };

    Turtle.prototype.fill = function(color) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.g.beginFill(color);
        _this.g.moveTo(_this.x, _this.y);
        return next();
      });
    };

    Turtle.prototype.clear = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        var g;
        _this.x = _this.home.x;
        _this.y = _this.home.y;
        _this.angle = _this.home.angle;
        _this.isPendown = true;
        _this.penColor = 'black';
        _this.stage.clear();
        _this.stage.removeAllChildren();
        g = new createjs.Graphics();
        g.setStrokeStyle(2);
        g.beginStroke('black');
        g.beginFill('gray');
        g.moveTo(-8, 7);
        g.lineTo(0, -15);
        g.lineTo(8, 7);
        g.lineTo(-8, 7);
        _this.turtle = new createjs.Shape(g);
        _this.stage.addChild(_this.turtle);
        return _this.newpath();
      });
    };

    Turtle.prototype.newpath = function() {
      this.g = new createjs.Graphics();
      this.g.beginStroke(this.penColor);
      this.g.moveTo(this.x, this.y);
      this.g.setStrokeStyle(2);
      this.stage.addChildAt(new createjs.Shape(this.g), 0);
      return this.update();
    };

    Turtle.prototype.home = function() {
      var _this = this;
      return this.queue.queue('move', function(next) {
        _this.x = _this.home.x;
        _this.y = _this.home.y;
        return _this.angle = _this.home.angle;
      });
    };

    Turtle.prototype.tick = function() {
      if (this.queue.length) {
        this.queue.dequeue('move');
        return this.stage.update();
      }
    };

    Turtle.prototype.speed = function(speed) {
      var _this = this;
      return this.queue.queue('move', function(next) {
        createjs.Ticker.setFPS(speed);
        return next();
      });
    };

    return Turtle;

  })();

  window.Turtle = Turtle;

}).call(this);
